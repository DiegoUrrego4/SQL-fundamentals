/*
SERIAL VS IDENTITY
- Con SERIAL la tabla generará los ids de forma automatica iniciando en 1 y sumandole de a 1 a medida que nosotros insertamos datos.
Desventaja:
- Pueden insertar datos de forma manual a nuestras tablas pudiendo provocar errores
*/
create table users
(
    user_id  serial primary key,
    username varchar
);

/*
Usando el identity podemos tener más control de nuestros querys
*/
create table users2
(
    user_id  integer generated by default as identity primary key,
    username varchar
);

create table users3
(
    -- Con generated always evitamos que inserten datos de forma manual, y por ende que la secuencia no funcione
    user_id  integer generated always as identity primary key,
    username varchar
);

create table users4
(
    -- Acá lo que hacemos es indicarle que el ID iniciará en 100 y se aumentará de 2 en 2
    user_id  integer generated always as identity (start with 100 increment by 2),
    username varchar
);

create table userDual(
    id1 int,
    id2 int,
    primary key (id1, id2) -- Con esto nos aseguramos que la COMBINACIÓN de ambos valores sean únicos
);

-- Esta extensión sirve para poder generar UUIDs en distintas versiones (v1, v2, …, etc)
-- Como esto NO existe en postgres toca instalarlo con este comando
CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; 
-- Y este comando es para eliminar esas funciones que se crean en caso de necesitarlo
DROP EXTENSION "uuid-ossp";
select gen_random_uuid(), uuid_generate_v4();

create table users5 (
    user_id uuid default uuid_generate_v4() primary key ,
    username varchar
);

-- Secuencias
create sequence user_sequence;
drop sequence user_sequence;

select currval('user_sequence'), nextval('user_sequence'), currval('user_sequence');

create table users6(
    user_id integer primary key default nextval('user_sequence'),
    username varchar
);